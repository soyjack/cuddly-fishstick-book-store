package com.example.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.dao.bookDao;
import com.example.dao.Impl.BookDaoImpl;
import com.example.exceptions.BookNotFoundException;
import com.example.model.Book;
import com.example.service.bookService;

import lombok.extern.slf4j.Slf4j;

@Service
public class BookServiceImpl implements bookService{
	private final Logger logger = LoggerFactory.getLogger(BookServiceImpl.class);
	
	@Autowired
	bookDao bookD;
	
	@Override
	public List<Book> getBooks(){
		Iterable<Book> books = bookD.findAll();
		logger.info(books.toString());
		List<Book> list = new ArrayList<>();
		books.forEach(list::add);
		logger.info(list.toString());
		return list;
	}

	@Override
	public Book saveBook(Book book) {
		// TODO Auto-generated method stub
		return bookD.save(book);
	}

	@Override
	public Book deleteBookById(int id) {
		// TODO Auto-generated method stub
		return bookD.deleteById(id);
	}

	@Override
	public Book findBookById(int id) {
		// TODO Auto-generated method stub
		Optional<Book> book = bookD.findById(id);
		if(book.isPresent()) {
			return book.get();
		}
		return null;
	}
	
	@Override
	public Book updateBook(int id, Book book) {
		Book bok = findBookById(id);
		if(bok!=null) {
			if(bok.getBookName() != null)
				bok.setBookName(bok.getBookName());
			if(bok.getBookDescription() != null)
				bok.setBookDescription(bok.getBookDescription());
			bookD.save(book);
			return bok;
		}
		else {
			throw new BookNotFoundException("Book with given id: "+id+" is not available");
		}
		
	}
}
